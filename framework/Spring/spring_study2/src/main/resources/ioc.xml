<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 在进行框架配置的时候，可以使用xml文件，也可以使用注解的方式。项目开发中，xml和注解一起使用。而且xml配置的方式比较完整  -->

    <!-- 根据属性值设置的时候，name的名称取决于setXX方法中Xx首字符小写的名称-->
    <bean id="person" class="com.maureen.bean.Person">
        <property name="id" value="1"></property>
        <property name="name" value="maureen"></property>
        <property name="age" value="18"></property>
        <property name="gender" value="女"></property>
    </bean>

    <!-- 使用构造器方法的时候，参数的name属性是由构造方法的参数列表的参数名称决定的 -->
    <!--
        name:表示参数列表的名称
        value:表示实际的具体值
        type：值的类型
        index：表示值的下标，从0开始
    -->
    <bean id="person2" class="com.maureen.bean.Person">
        <constructor-arg name="id" value="2"></constructor-arg>
        <constructor-arg name="name" value="lisi"></constructor-arg>
        <constructor-arg name="age" value="22"></constructor-arg>
        <constructor-arg name="gender" value="女"></constructor-arg>
    </bean>

    <!-- 当通过构造器方法赋值的时候，可以把name属性值省略不写，但是要注意必须要保证参数值跟构造器的参数列表的顺序一致
        如果想不按照参数列表的顺序，就要加index下标来标注，从0开始
     -->
    <bean id="person3" class="com.maureen.bean.Person">
        <constructor-arg value="3"></constructor-arg>
        <constructor-arg value="男" index="3"></constructor-arg>
        <constructor-arg value="wangwu"></constructor-arg>
        <constructor-arg value="23"></constructor-arg>
    </bean>

    <!--当有多个相同参数的构造方法存在的时候，默认情况下是覆盖的过程，后面的构造方法会覆盖前面的构造方法
     如果非要赋值给另外一个构造方法，可以使用type的参数来进行指定-->
    <bean id="person4" class="com.maureen.bean.Person">
        <constructor-arg value="4"></constructor-arg>
        <constructor-arg value="zhaoliu"></constructor-arg>
        <constructor-arg value="23" type="java.lang.Integer"></constructor-arg>
    </bean>

    <!--如果不修改为integer类型，那么需要type跟index组合使用-->
    <!--    <bean id="person5" class="com.maureen.bean.Person">-->
    <!--        <constructor-arg value="5"></constructor-arg>-->
    <!--        <constructor-arg value="haqi"></constructor-arg>-->
    <!--        <constructor-arg value="20" type="int" index="2"></constructor-arg>-->
    <!--    </bean>-->

    <!-- 使用p命名空间给属性赋值 -->
    <bean id="person6" class="com.maureen.bean.Person" p:id="6" p:name="maliu" p:age="25" p:gender="女"/>

    <!-- 给复杂类型进行赋值操作 -->
    <bean id="person7" class="com.maureen.bean.Person">
        <property name="id" value="7"></property>
        <property name="name" value="maureen"></property>
        <property name="age" value="18"></property>
        <property name="gender" value="女"></property>
        <!-- 给数组赋值,使用array标签-->
        <!-- <property name="hobbies" value="book,girl,movie"></property> -->
        <property name="hobbies">
            <array>
                <value>girl</value>
                <value>book</value>
                <value>movie</value>
            </array>
        </property>
        <!-- 给引用类型赋值:可以使用ref引入外部bean-->
        <property name="address" ref="address"></property>
        <!--给List赋值-->
        <!-- <property name="lists" value="1,2,3"></property> -->
        <property name="lists">
            <list>
                <!--使用内部bean，无法从IoC容器中直接获取对象的值-->
                <bean class="com.maureen.bean.Address">
                    <property name="province" value="北京"></property>
                </bean>
                <bean class="com.maureen.bean.Address">
                    <property name="province" value="上海"></property>
                </bean>
                <!--使用外部bean，可以随意从IoC容器获取对象的值-->
                <ref bean="address"></ref>
            </list>
        </property>
        <!--给set属性赋值-->
        <property name="sets">
            <set>
                <value>张三</value>
                <value>张三</value>
                <value>李四</value>
            </set>
        </property>
        <!--给map赋值-->
        <property name="maps">
            <map>
                <entry key="a" value="aaa"></entry>
                <entry key="address" value-ref="address"></entry>
                <entry key="address2">
                    <bean class="com.maureen.bean.Address">
                        <property name="province" value="重庆"></property>
                    </bean>
                </entry>
                <entry>
                    <key>
                        <value>hehe</value>
                    </key>
                    <value>haha</value>
                </entry>
                <entry key="list">
                    <list>
                        <value>11</value>
                        <value>22</value>
                    </list>
                </entry>
            </map>
        </property>
        <!--给Properties属性赋值-->
        <property name="properties">
            <props>
                <prop key="111">aaa</prop>
                <prop key="222">bbb</prop>
            </props>
        </property>
    </bean>

    <bean id="address" class="com.maureen.bean.Address">
        <property name="province" value="广东省"></property>
        <property name="city" value="深圳"></property>
        <property name="town" value="南山区"></property>
    </bean>

    <!--bean之间的继承关系-->
    <!--可以使用abstract属性定义抽象bean，无法实例化-->
    <bean id="parent" class="com.maureen.bean.Person" abstract="true">
        <property name="id" value="1"></property>
        <property name="name" value="maureen"></property>
        <property name="age" value="18"></property>
        <property name="gender" value="女"></property>
    </bean>
    <!--可以通过parent属性来获取父bean中的某些属性值-->
    <bean id="son" class="com.maureen.bean.Person" parent="parent">
        <property name="name" value="haha"></property>
    </bean>

    <!-- 创建bean的时候依赖关系 -->
    <!--
        当bean对象被创建的时候，是按照xml配置文件定义的顺序创建的，谁在前谁就先被创建
        如果需要干扰创建的顺序，可以使用denpends-on属性
        一般在实际工作中，不必在意bean创建的顺序，无论谁先创建，需要依赖的对象在创建完成之后都会进行赋值操作
    -->
    <bean id="person8" class="com.maureen.bean.Person" depends-on="address3"></bean>
    <bean id="address3" class="com.maureen.bean.Address"></bean>

    <!-- 设置bean对象的作用域-->
    <!--通过scope属性可以指定当前bean的作用域：
        singleton：单例模式，从IoC容器中获取的都是同一个对象，默认的作用域
        prototype：多例模式，从IoC容器中获取的对象都是新创建的
        在spring4.x的版本中还包含另外两种作用域（几乎不用，从来没用过，因此在5版本被淘汰了）：
           request：每次发送请求都会有一个新的对象
           session：每次会话都会有一个新的对象
        注意：
            如果是singleton作用域的话，每次在IoC容器创建完成之前此对象已经创建完成
            如果是prototype作用域的话，每次是在需要用到此对象的时候才会创建（即创建Person对象的时候才会创建）
    -->
    <bean id="person9" class="com.maureen.bean.Person" scope="prototype"></bean>


    <!--利用工厂方法创建bean-->
    <!--静态工厂:类名.静态方法-->
    <bean id="person10" class="com.maureen.factory.PersonStaticFactory" factory-method="getInstance">
        <constructor-arg value="peng"></constructor-arg>
    </bean>
    <!--实例工厂：先创建工厂实例，然后调用工厂实例的方法 -->
    <!--
        factory-bean:表示具体工厂类的实例
        factory-method：表示具体工厂实例的方法
    -->
    <bean id="instanceFactory" class="com.maureen.factory.PersonInstanceFactory"></bean>
    <bean id="person11" class="com.maureen.bean.Person" factory-bean="instanceFactory" factory-method="getInstance">
        <constructor-arg value="ya"></constructor-arg>
    </bean>

    <!-- 将创建的对象交由IOC容器管理-->
    <bean id="myFactoryBean" class="com.maureen.factory.MyFactoryBean"></bean>

    <!--Spring容器在创建对象的时候可以指定具体的初始化和销毁方法。
            init-method: 在对象创建完成之后会调用初始化方法
            destory-method: 在容器关闭的时候会调用销毁方法
        初始化和销毁方法跟scope属性也是相关联的。bean生命周期表示bean的创建到销毁
                如果bean是单例，初始化和销毁方法都会调用
                如果bean是多例，初始化方法会调用，但销毁方法不会调用
    -->
    <bean id="person12" class="com.maureen.bean.Person" init-method="init" destroy-method="destory"></bean>

    <!--配置bean对象初始化方法的前后处理方法-->
    <bean id="myBeanPostProcessor" class="com.maureen.bean.MyBeanPostProcessor"></bean>

    <!--Spring管理第三方bean-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="root"></property>
        <property name="password" value="123456"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/test"></property>
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
    </bean>

    <!--当需要引入外部的配置文件的时候，需要导入一些context的命令空间-->
    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>
    <!--在配置文件编写属性的时候需要注意：
        Spring容器在进行启动的时候，会读取当前系统的某些环境变量的配置，
        当前系统的用户名是用username来表示的，所以最好的方式是添加前缀来做区分-->
    <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>
    </bean>
</beans>